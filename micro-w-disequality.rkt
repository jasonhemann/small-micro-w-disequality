#lang racket
(provide (all-defined-out))
(define (var? n) (number? n))
(define (var n) n)
(define (ext-s x v s) `((,x . ,v) . ,s))
(define (walk u s)
  (let ((pr (assv u s)))
    (if pr (walk (cdr pr) s) u)))
(define (unify u v s)
  (let ((u (walk u s)) (v (walk v s)))
    (cond
      ((eqv? u v) s)
      ((var? u) (ext-s u v s))
      ((var? v) (ext-s v u s))
      ((and (pair? u) (pair? v))
       (let ((s (unify (car u) (car v) s)))
         (and s (unify (cdr u) (cdr v) s))))
      (else #f))))
(define (== u v)
  (lambda (s/d/c)
    (let ((s (unify u v (car s/d/c))))
      (if s (return (cons s (cdr s/d/c))) '()))))
(define (call/fresh f)
  (lambda (s/d/c)
    (let ((s (car s/d/c)) (d (cadr s/d/c)) (c (cddr s/d/c)))
      ((f (var c)) `(,s ,d . ,(+ 1 c))))))
(define (disj g1 g2) (lambda (s/d/c) ($append (g1 s/d/c) (g2 s/d/c))))
(define (invalid? s d)
  (ormap (lambda (pr) (equal? (unify (car pr) (cdr pr) s) s)) d)) ;; type kludge
(define (return a) (if (invalid? (car a) (cadr a)) '() (list a)))
(define (=/= u v)
  (lambda (s/d/c)
    (let ((s (car s/d/c)) (d (cadr s/d/c)) (c (cddr s/d/c)))
      (return `(,s ((,u . ,v) . ,d) . ,c)))))
(define ($append $1 $2)
  (cond
    ((null? $1) $2)
    ((pair? $1) (cons (car $1) ($append (cdr $1) $2)))
    ((procedure? $1) (lambda () ($append $2 ($1))))))
(define (conj g1 g2) (lambda (s/d/c) ($append-map g2 (g1 s/d/c))))
(define ($append-map g $)
  (cond
    ((null? $) `())
    ((pair? $) ($append (g (car $)) ($append-map g (cdr $))))
    ((procedure? $) (lambda () ($append-map g ($))))))
;; (define (call/initial-state g)
;;   (pull (g '(() () . 0))))
;; ;; (define (absento u v)
;; ;;   (lambda (s/a/c)
;; ;;     (let ((s (car s/a/c)) (a (cadr s/a/c)) (c (cddr s/a/c)))
;; ;;       (return2 `(,s ((,u . ,v) . ,d) . ,c)))))
;; ;; (define (return2 a) (if (invalid?2 (car a) (cadr a)) '() (list a)))
;; ;; (define (invalid?2 s a)
;; ;;   (ormap (lambda (pr) (mem? (car a) (cdr a) s)) d))
;; ;; (define (mem? u v s)
;; ;;   (let ((v (walk v s)))
;; ;;     (or (equal? (unify u v s) s)
;; ;;         (and (pair? v)
;; ;;              (or (mem? u (car v) s)
;; ;;                  (mem? u (cdr v) s))))))
